{"version":3,"sources":["utils/helpers/LargeAvatar.tsx","components/Pages/Socials/components/FollowButton.tsx","components/Pages/Socials/components/FollowButtonContainer.ts","components/Pages/Socials/People/ListItemOfPerson.tsx","components/Pages/Socials/People/ListOfPeople.tsx","components/Pages/Socials/People/ListOfPeopleContainer.ts","components/Pages/Socials/People/People.tsx"],"names":["useStyle","makeStyles","theme","large","width","spacing","height","cursor","LargeAvatar","click","picture","children","classes","color","overlap","badgeContent","onClick","anchorOrigin","vertical","horizontal","src","className","FollowButton","followed","followingThunk","unfollowingThunk","getUserFollowingInfo","id","peopleSetLoading","followQueue","isLoading","includes","useState","loading","setLoading","useEffect","setTimeout","CircularProgress","Button","variant","connect","store","people","ListItemOfPerson","classProp","photo","textClassProp","personName","ListItem","alignItems","Grid","container","display","justify","Skeleton","ListItemAvatar","ListItemText","primary","to","pathname","state","secondary","Typography","component","FollowButtonContainer","Divider","paper","padding","margin","listItem","justifyItems","listItemText","marginLeft","ListOfPeople","setPeopleThunk","page","setPage","list","length","i","key","map","el","photos","small","name","List","Paper","Pagination","count","onChange","event","pageNumber","People"],"mappings":"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","file":"static/js/4.40d43888.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    large: {\r\n        width: theme.spacing(15),\r\n        height: theme.spacing(15),\r\n        cursor: \"pointer\"\r\n    },\r\n}));\r\n\r\ntype PropsType = {\r\n    click?: ()=> void,\r\n    picture?: string | null,\r\n    children?: React.ComponentType\r\n}\r\n\r\nconst LargeAvatar:React.FC<PropsType> = ({click, picture, children}) => {\r\n    let classes = useStyle();\r\n    return <Badge color=\"secondary\" overlap=\"circle\" badgeContent=\" \" onClick={click}\r\n                  anchorOrigin={{\r\n                      vertical: 'top',\r\n                      horizontal: 'right',\r\n                  }}>\r\n        <Avatar src={picture || \"\"} className={classes.large} />\r\n        {children}\r\n    </Badge>\r\n};\r\n\r\nexport default LargeAvatar;","import React, {Fragment, useEffect, useState} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\n\r\ntype PropsType = {\r\n    followed?: boolean\r\n    id: number\r\n    peopleSetLoading: boolean\r\n    followingThunk: (userId: number) => void\r\n    unfollowingThunk: (userId: number) => void\r\n    followQueue: Array<number>\r\n    getUserFollowingInfo: (userId: number) => void\r\n}\r\n\r\n\r\nconst FollowButton: React.FC<PropsType> = ({followed, followingThunk, unfollowingThunk, getUserFollowingInfo, id, peopleSetLoading, followQueue}) => {\r\n    let isLoading = followQueue.includes(id);\r\n    const [loading, setLoading] = useState(false);\r\n    useEffect(()=>{\r\n        setLoading(true);\r\n        getUserFollowingInfo(id);\r\n        setTimeout(()=>{setLoading(false)}, 300);\r\n    },[]);\r\n    return <Fragment>\r\n        {\r\n            (isLoading || peopleSetLoading || loading) ? <CircularProgress/> :\r\n                followed ? <Button variant=\"contained\" color=\"primary\" onClick={() => unfollowingThunk(id)}>\r\n                        UNFOLLOW\r\n                    </Button>\r\n                    : <Button variant=\"outlined\" color=\"primary\" onClick={() => followingThunk(id)}>\r\n                        FOLLOW\r\n                    </Button>\r\n        }\r\n    </Fragment>\r\n}\r\n\r\nexport default FollowButton;","import {connect} from \"react-redux\";\r\nimport FollowButton from \"./FollowButton\";\r\nimport {RootStateType} from \"../../../../redux/rootReducer\";\r\nimport {followingThunk, getUserFollowingInfo, unfollowingThunk} from \"../../../../redux/Socials/peopleReducer\";\r\n\r\n\r\ntype MapStateType = {\r\n    peopleSetLoading: boolean\r\n    followQueue: Array<number>\r\n}\r\n\r\ntype MapDispatchtype = {\r\n    followingThunk: (userId: number) => void\r\n    unfollowingThunk: (userId: number) => void\r\n    getUserFollowingInfo: (userId: number) => void\r\n}\r\ntype OwnPropsType = {\r\n    followed: boolean\r\n    id: number | null\r\n}\r\n\r\nconst mapStateToProps = (store: RootStateType) => ({\r\n    peopleSetLoading: store.people.loading,\r\n    followQueue: store.people.followQueue,\r\n});\r\n\r\n\r\n//<TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultRootState>\r\nexport default connect<MapStateType, MapDispatchtype, OwnPropsType, RootStateType>(mapStateToProps, {\r\n    followingThunk,\r\n    unfollowingThunk,\r\n    getUserFollowingInfo\r\n})(FollowButton);","import React, {Fragment} from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport LargeAvatar from \"../../../../utils/helpers/LargeAvatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\nimport {Link} from \"react-router-dom\";\r\nimport FollowButtonContainer from \"../components/FollowButtonContainer\";\r\n\r\n\r\ntype PropsType = {\r\n    classProp?: any\r\n    photo?: string | null\r\n    textClassProp?: string\r\n    loading: boolean\r\n    id?: number\r\n    personName?: string\r\n    followed?: boolean\r\n}\r\n\r\n\r\nconst ListItemOfPerson: React.FC<PropsType> = ({classProp, photo, textClassProp, loading, id, personName, followed}) => {\r\n    return <Fragment>\r\n        <ListItem alignItems=\"flex-start\" className={classProp}>\r\n            {/*   @ts-ignore*/}\r\n            <Grid container display={\"flex\"} alignItems=\"center\" justify=\"space-between\">\r\n                {loading ? <Skeleton variant={\"circle\"}>\r\n                    <LargeAvatar/>\r\n                </Skeleton> : <ListItemAvatar>\r\n                    <LargeAvatar picture={photo}/>\r\n                </ListItemAvatar>}\r\n\r\n                <ListItemText className={textClassProp} primary={loading ? <Skeleton/> :\r\n                    <Link to={{pathname: `/profile/${id}`, state: {followed: followed}}}>{personName}</Link>}\r\n                              secondary={\r\n                                  <Typography\r\n                                      component=\"span\"\r\n                                      variant=\"body2\"\r\n                                      color=\"textPrimary\"\r\n                                  >\r\n                                      {loading ? <Skeleton/> : \"Florida, USA\"}\r\n                                  </Typography>\r\n                              }\r\n                />\r\n                <FollowButtonContainer followed={followed || false} id={id || 0}/>\r\n            </Grid>\r\n        </ListItem>\r\n        <Divider/>\r\n    </Fragment>\r\n};\r\n\r\nexport default ListItemOfPerson;","import React, {useEffect, useState} from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport ListItemOfPerson from \"./ListItemOfPerson\";\r\nimport {PeopleType} from \"../../../../types/socials\";\r\nimport {Pagination} from \"@material-ui/lab\";\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        margin: theme.spacing(3)\r\n    },\r\n    listItem: {\r\n        justifyItems: \"center\",\r\n    },\r\n    listItemText: {\r\n        marginLeft: theme.spacing(3),\r\n    }\r\n}));\r\n\r\ntype PropsType = {\r\n    setPeopleThunk: (page: number) => void\r\n    people: Array<PeopleType>,\r\n    isLoading: boolean\r\n}\r\n\r\nconst ListOfPeople: React.FC<PropsType> = ({people, setPeopleThunk, isLoading}) => {\r\n    const [page, setPage] = useState(1);\r\n    useEffect(() => {\r\n        setPeopleThunk(page);\r\n    }, [page]);\r\n    const classes = useStyle();\r\n    let list: any = [];\r\n    if (people.length === 0) {\r\n        for (let i = 0; i < 10; i++)\r\n            list = [...list, <ListItemOfPerson key={i} classProp={classes.listItem} textClassProp={classes.listItemText}\r\n                                               loading={isLoading}/>];\r\n    } else\r\n        list = people.map(el => <ListItemOfPerson key={el.id} classProp={classes.listItem}\r\n                                                  textClassProp={classes.listItemText}\r\n                                                  photo={el.photos.small}\r\n                                                  personName={el.name}\r\n                                                  followed={el.followed}\r\n                                                  id={el.id}\r\n                                                  loading={isLoading}\r\n\r\n        />);\r\n\r\n    return <List>\r\n        <Paper className={classes.paper}>\r\n            {list}\r\n            <Pagination count={400} color=\"primary\" onChange={(event, pageNumber) => setPage(pageNumber)}/>\r\n        </Paper>\r\n    </List>\r\n};\r\n\r\nexport default ListOfPeople;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport ListOfPeople from \"./ListOfPeople\";\r\nimport {\r\n    setPeopleThunk,\r\n} from \"../../../../redux/Socials/peopleReducer\";\r\nimport {PeopleType} from \"../../../../types/socials\";\r\nimport {RootStateType} from \"../../../../redux/rootReducer\";\r\n\r\ntype MapStateType = {\r\n    people: Array<PeopleType>,\r\n    isLoading: boolean,\r\n}\r\n\r\ntype MapDispatchType = {\r\n    setPeopleThunk: (page: number)=>void\r\n}\r\n\r\nconst mapStateToProps = (store: RootStateType): MapStateType => ({\r\n    people: store.people.people,\r\n    isLoading: store.people.loading,\r\n});\r\n\r\nexport default connect<MapStateType, MapDispatchType, {},  RootStateType>(mapStateToProps, { setPeopleThunk})(ListOfPeople);","import React, {Fragment} from \"react\";\r\nimport ListOfPeople from \"./ListOfPeopleContainer\";\r\n\r\n\r\nconst People = () => {\r\n    return <Fragment>\r\n        <ListOfPeople/>\r\n    </Fragment>\r\n};\r\n\r\nexport default People;"],"sourceRoot":""}